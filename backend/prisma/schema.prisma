generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // postgres
  url      = env("DATABASE_URL")
}

// enum Roles {
//   ADMIN
//   FREQUENTER
//   ENVIRONMENT-MANAGER
// }

model Rfid {
  id        String   @id @default(uuid())
  tag       String   @unique
  active    Boolean
  User      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EnvAccess {
  id            String      @id @default(uuid())
  dayOfWeek     String
  startTime     DateTime
  endTime       DateTime
  active        Boolean
  User          User        @relation(fields: [userId], references: [id])
  userId        String
  Environment   Environment @relation(fields: [environmentId], references: [id])
  environmentId String
}

model EnvManager {
  id            String      @id @default(uuid())
  active        Boolean
  User          User        @relation(fields: [userId], references: [id])
  userId        String
  Environment   Environment @relation(fields: [environmentId], references: [id])
  environmentId String
}

model User {
  id           String       @id @default(uuid())
  name         String
  registration String       @unique
  password     String
  role         String // Roles
  Rfid         Rfid?
  mac          String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  Log          Log[]
  EnvAccess    EnvAccess[]
  EnvManager   EnvManager[]
}

model Environment {
  id          String       @id @default(uuid())
  name        String       @unique
  description String?
  active      Boolean
  carontes    Caronte[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  EnvAccess   EnvAccess[]
  EnvManager  EnvManager[]
}

model Caronte {
  id            String      @id @default(uuid())
  ip            String      @unique
  esp           String      @unique
  password      String
  active        Boolean
  Environment   Environment @relation(fields: [environmentId], references: [id])
  environmentId String
  Log           Log[]
}

// enum LogTypes {
//   INFO
//   WARN
//   DEBUG
// }

model Log {
  id               String   @id @default(uuid())
  Caronte          Caronte  @relation(fields: [caronteMac], references: [esp])
  caronteMac       String
  User             User?    @relation(fields: [userRegistration], references: [registration])
  userRegistration String?
  type             String // LogTypes
  message          String
  obolType         String
  createdAt        DateTime @default(now())
}
